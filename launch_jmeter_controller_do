#!/bin/bash
# Get the absolute path of the script's directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_ENV_FILE="$SCRIPT_DIR/app_do.env"

# Function to check if a docker-machine already exists
function check_machine_exists() {
    docker-machine ls | grep -w "$1" > /dev/null 2>&1
}

# Provision the JMeter Controller node using Docker Machine
echo "Provisioning machine for JMeter Controller node..."

# Check if the machine already exists
if check_machine_exists "jmeter-controller"; then
    echo "Docker machine 'jmeter-controller' already exists. Skipping creation."
else
    docker-machine create \
        --driver digitalocean \
        --digitalocean-access-token "$DIGITALOCEAN_ACCESS_TOKEN" \
        --digitalocean-region "$DIGITALOCEAN_REGION" \
        --digitalocean-size "$DIGITALOCEAN_SIZE" \
        --digitalocean-image "ubuntu-20-04-x64" \
        --engine-label type=controller \
        jmeter-controller

    if [ $? -ne 0 ]; then
        echo "Error: Failed to create the JMeter Controller machine."
        exit 1
    fi
fi
#**Non-Interactive System Update**
echo "Updating the Ubuntu system on jmeter-controller without interactive prompts..."
docker-machine ssh jmeter-controller "sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y"

# Initialize Docker Swarm on the controller node
eval "$(docker-machine env jmeter-controller)"
SWARM_MANAGER_IP=$(docker-machine ip jmeter-controller)

echo "Initializing Docker Swarm on JMeter Controller node with IP: $SWARM_MANAGER_IP"
docker swarm init --advertise-addr "$SWARM_MANAGER_IP"

if [ $? -ne 0 ]; then
    echo "Error: Failed to initialize Docker Swarm on the JMeter Controller node."
    exit 1
fi

# **Create a Docker overlay network for JMeter communication**
docker network create --driver overlay jmeter-network
if [ $? -ne 0 ]; then
    echo "Error: Failed to create Docker overlay network 'jmeter-network'."
    exit 1
fi
echo "Docker overlay network 'jmeter-network' created successfully."

# Get the join token for worker nodes
WORKER_JOIN_TOKEN=$(docker swarm join-token -q worker)

# Check if the app_do.env file exists and update it with the Swarm join token
if [[ -f "$APP_ENV_FILE" ]]; then
    sed -i '' "s/export TOKEN=.*/export TOKEN=$WORKER_JOIN_TOKEN/" "$APP_ENV_FILE"
    echo "Swarm join token updated in $APP_ENV_FILE"
else
    echo "Error: app_do.env file not found at $APP_ENV_FILE"
    exit 1
fi

# **Add firewall rules to open necessary ports** (Newly Added)
docker-machine ssh jmeter-controller "sudo ufw allow 2377/tcp"
docker-machine ssh jmeter-controller "sudo ufw allow 7946/tcp"
docker-machine ssh jmeter-controller "sudo ufw allow 7946/udp"
docker-machine ssh jmeter-controller "sudo ufw allow 4789/udp"
docker-machine ssh jmeter-controller "sudo ufw allow 1099/tcp"
docker-machine ssh jmeter-controller "sudo ufw --force enable"

echo "Firewall rules configured to allow necessary ports for Docker Swarm and JMeter."

echo "JMeter Controller node provisioned and Swarm initialized successfully."
echo "Swarm worker join token: $WORKER_JOIN_TOKEN"
echo "To manage the swarm, run: eval \"\$(docker-machine env jmeter-controller)\""
