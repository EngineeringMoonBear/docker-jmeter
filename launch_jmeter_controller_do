#!/bin/bash

# Get the absolute path of the script's directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_ENV_FILE="$SCRIPT_DIR/app_do.env"

# Function to check if a Docker machine already exists
function check_machine_exists() {
    docker-machine ls | grep -w "$1" > /dev/null 2>&1
}

# Function to forcefully regenerate TLS certificates
function regenerate_tls_certificates() {
    echo "Regenerating TLS certificates for jmeter-controller..."
    docker-machine regenerate-certs -f jmeter-controller
    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to regenerate TLS certificates for jmeter-controller."
        exit 1
    fi
}

# Ensure the DigitalOcean firewall allows required ports for Docker and JMeter communication
function configure_firewall() {
    echo "Configuring firewall rules on jmeter-controller..."
    docker-machine ssh jmeter-controller "sudo ufw allow 22/tcp"      # Allow SSH connections
    docker-machine ssh jmeter-controller "sudo ufw allow 2376/tcp"    # Docker Machine communication
    docker-machine ssh jmeter-controller "sudo ufw allow 2377/tcp"    # Docker Swarm manager port
    docker-machine ssh jmeter-controller "sudo ufw allow 7946/tcp"    # Overlay network TCP
    docker-machine ssh jmeter-controller "sudo ufw allow 7946/udp"    # Overlay network UDP
    docker-machine ssh jmeter-controller "sudo ufw allow 4789/udp"    # Overlay network UDP (VXLAN)
    docker-machine ssh jmeter-controller "sudo ufw allow 1099/tcp"    # JMeter RMI communication port
    docker-machine ssh jmeter-controller "sudo ufw --force enable"    # Enable UFW without prompt
}

# Provision the JMeter Controller node using Docker Machine
echo "Provisioning machine for JMeter Controller node..."

# Check if the machine already exists
if check_machine_exists "jmeter-controller"; then
    echo "Docker machine 'jmeter-controller' already exists. Skipping creation."
else
    docker-machine create \
        --driver digitalocean \
        --digitalocean-access-token "$DIGITALOCEAN_ACCESS_TOKEN" \
        --digitalocean-region "$DIGITALOCEAN_REGION" \
        --digitalocean-size "$DIGITALOCEAN_SIZE" \
        --digitalocean-image "ubuntu-20-04-x64" \
        --engine-label type=controller \
        jmeter-controller

    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to create the JMeter Controller machine."
        exit 1
    fi
fi

# Regenerate TLS certificates to ensure secure communication
regenerate_tls_certificates

# Non-Interactive System Update to ensure UFW is installed and up-to-date
echo "Updating the Ubuntu system on jmeter-controller without interactive prompts..."
docker-machine ssh jmeter-controller "sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ufw"

# Configure firewall settings
configure_firewall

# Verify firewall status to confirm that all necessary ports are open
docker-machine ssh jmeter-controller "sudo ufw status verbose"
echo "Firewall rules configured successfully for Docker Swarm and JMeter."

# Retry logic to connect to the JMeter Controller if the initial attempt fails
for i in {1..5}; do
    if eval "$(docker-machine env jmeter-controller)"; then
        echo "Successfully connected to the JMeter Controller node."
        break
    else
        echo "Connection to JMeter Controller node failed. Retrying in 15 seconds..."
        sleep 15
        regenerate_tls_certificates
    fi
done

# If connection fails after retries, exit with an error message
if ! eval "$(docker-machine env jmeter-controller)"; then
    echo "[ERROR] Unable to connect to the JMeter Controller node after multiple attempts."
    exit 1
fi

# Initialize Docker Swarm on the controller node
SWARM_MANAGER_IP=$(docker-machine ip jmeter-controller)
echo "Initializing Docker Swarm on JMeter Controller node with IP: $SWARM_MANAGER_IP"
docker-machine ssh jmeter-controller "docker swarm init --advertise-addr $SWARM_MANAGER_IP"

if [ $? -ne 0 ]; then
    echo "[ERROR] Failed to initialize Docker Swarm on the JMeter Controller node."
    exit 1
fi

# Create a Docker overlay network for JMeter communication
docker-machine ssh jmeter-controller "docker network create --driver overlay jmeter-network"
if [ $? -ne 0 ]; then
    echo "[ERROR] Failed to create Docker overlay network 'jmeter-network'."
    exit 1
fi
echo "Docker overlay network 'jmeter-network' created successfully."

# Set up JMeter to disable SSL for RMI communication
echo "Disabling SSL for RMI communication in JMeter configuration..."
docker-machine ssh jmeter-controller "docker run \
    --detach \
    --name jmeter-controller \
    --volume /load_tests:/load_tests \
    --env JMETER_OPTS='-Dserver.rmi.ssl.disable=true' \
    justb4/jmeter:5.5 \
    bash -c 'echo server.rmi.ssl.disable=true >> /opt/apache-jmeter-5.5/bin/jmeter.properties && \
    echo client.rmi.localport=1099 >> /opt/apache-jmeter-5.5/bin/jmeter.properties && \
    echo server.rmi.localport=1099 >> /opt/apache-jmeter-5.5/bin/jmeter.properties && \
    echo server.rmi.port=4000 >> /opt/apache-jmeter-5.5/bin/jmeter.properties'"

# Get the join token for worker nodes and update the environment file
WORKER_JOIN_TOKEN=$(docker-machine ssh jmeter-controller "docker swarm join-token -q worker")
if [[ -f "$APP_ENV_FILE" ]]; then
    sed -i '' "s/export TOKEN=.*/export TOKEN=$WORKER_JOIN_TOKEN/" "$APP_ENV_FILE"
    echo "Swarm join token updated in $APP_ENV_FILE."
else
    echo "[ERROR] app_do.env file not found at $APP_ENV_FILE."
    exit 1
fi

echo "JMeter Controller node provisioned and Swarm initialized successfully."
echo "Swarm worker join token: $WORKER_JOIN_TOKEN"
echo "To manage the swarm, run: eval \"\\\$(docker-machine env jmeter-controller)\""


