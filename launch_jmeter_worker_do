#!/bin/bash

# Default to 1 if no parameter is given
count=${1-1}

# Max of 20 machines only, adjust accordingly if needed
max=20

# Check if the count parameter is a positive integer within the allowed range
if ! [[ $count =~ ^[0-9]+$ ]] || ! [[ "$count" -gt 0 && "$count" -le "$max" ]]; then
    echo "[ERROR] Parameter is not a positive integer (must be between 1 and $max)." >&2
    exit 1
fi

# Limit the count to the maximum number of machines
if [ "$count" -gt "$max" ]; then
    count=$max
fi

# Initialize environment variables
source ./app_do.env

# Initialize iterator and IP list for worker nodes
iterator=1
server_ips=""

while [ "$iterator" -le "$count" ]; do
    echo "Provisioning machine for JMeter Worker node $iterator..."

    # Create the DigitalOcean droplet for the JMeter worker node
    docker-machine create \
        --driver digitalocean \
        --digitalocean-access-token "$DIGITALOCEAN_ACCESS_TOKEN" \
        --digitalocean-region "$DIGITALOCEAN_REGION" \
        --digitalocean-size "$DIGITALOCEAN_SIZE" \
        --digitalocean-image "ubuntu-20-04-x64" \
        --engine-label type=worker \
        jmeter-worker-$iterator

    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to create the JMeter Worker machine: jmeter-worker-$iterator."
        exit 1
    fi

    # Non-Interactive System Update to ensure UFW is installed and up-to-date
    echo "Updating the Ubuntu system on jmeter-worker-$iterator without interactive prompts..."
    docker-machine ssh jmeter-worker-$iterator "sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ufw"

    # Add a delay to allow the Droplet to finish initializing
    echo "Waiting 60 seconds for the Droplet to fully initialize..."
    sleep 60

    # Retry SSH connection with a loop to handle potential delays
    for i in {1..5}; do
        if docker-machine ssh jmeter-worker-$iterator "echo 'SSH connection successful'"; then
            break
        else
            echo "Retrying SSH connection to jmeter-worker-$iterator in 10 seconds..."
            sleep 10
        fi
    done

    # Set the environment variables to point to the newly created machine
    eval "$(docker-machine env jmeter-worker-$iterator)"

    # Configure firewall settings on the worker node
    echo "Configuring firewall rules on jmeter-worker-$iterator for Docker Swarm and JMeter communication..."
    docker-machine ssh jmeter-worker-$iterator "sudo ufw allow 2377/tcp"  # Docker Swarm manager port
    docker-machine ssh jmeter-worker-$iterator "sudo ufw allow 7946/tcp"  # Overlay network TCP
    docker-machine ssh jmeter-worker-$iterator "sudo ufw allow 7946/udp"  # Overlay network UDP
    docker-machine ssh jmeter-worker-$iterator "sudo ufw allow 4789/udp"  # Overlay network UDP (VXLAN)
    docker-machine ssh jmeter-worker-$iterator "sudo ufw allow 1099/tcp"  # JMeter RMI communication port
    docker-machine ssh jmeter-worker-$iterator "sudo ufw allow 4000/tcp"  # Additional JMeter server communication port
    docker-machine ssh jmeter-worker-$iterator "sudo ufw --force enable"   # Enable UFW without prompt
    echo "Firewall rules configured successfully on jmeter-worker-$iterator."

    # Get the public IP address of the worker node
    ip=$(docker-machine ip jmeter-worker-$iterator)

    # Run the JMeter server using the updated Docker image and attach it to the overlay network
    echo "Running JMeter in Server Mode on jmeter-worker-$iterator with IP: $ip..."

    docker-machine ssh jmeter-worker-$iterator "docker run \
        --detach \
        --publish 1099:1099 \
        --publish 4000:4000 \
        --network jmeter-network \
        --env JMETER_OPTS='-Dserver.rmi.ssl.disable=true -Djava.rmi.server.hostname=$ip' \
        justb4/jmeter:5.5 -s -Jserver.rmi.localport=1099 -Jserver.rmi.ssl.disable=true -Jserver_port=4000"

    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to run JMeter server on jmeter-worker-$iterator."
        exit 1
    fi

    # Add the IP of the worker node to the list of server IPs
    server_ips+="$ip,"

    # Increment the iterator
    iterator=$((iterator + 1))
done

# Output the list of worker IP addresses for use by the JMeter Controller node
echo "Worker IPs for use in JMeter Controller: $(echo $server_ips | sed 's/,$//')"

exit
