#!/bin/bash

# Get the absolute path of the script's directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_ENV_FILE="$SCRIPT_DIR/app_do.env"

# Ensure the environment file is sourced
if [[ -f "$APP_ENV_FILE" ]]; then
    source "$APP_ENV_FILE"
else
    echo "[ERROR] app_do.env file not found at $APP_ENV_FILE."
    exit 1
fi

# Check for the swarm join token
if [[ -z "$TOKEN" ]]; then
    echo "[ERROR] Docker Swarm join token not found. Ensure the controller has initialized the swarm."
    exit 1
fi

# Function to check if a Docker machine already exists
function check_machine_exists() {
    docker-machine ls | grep -w "$1" > /dev/null 2>&1
}

# Function to configure firewall settings
function configure_firewall() {
    echo "Configuring firewall rules on $1..."
    docker-machine ssh "$1" "sudo ufw allow 22/tcp"     # Allow SSH connections
    docker-machine ssh "$1" "sudo ufw allow 2377/tcp"   # Docker Swarm manager port
    docker-machine ssh "$1" "sudo ufw allow 7946/tcp"   # Overlay network TCP
    docker-machine ssh "$1" "sudo ufw allow 7946/udp"   # Overlay network UDP
    docker-machine ssh "$1" "sudo ufw allow 4789/udp"   # Overlay network UDP (VXLAN)
    docker-machine ssh "$1" "sudo ufw allow 1099/tcp"   # JMeter RMI communication port
    docker-machine ssh "$1" "sudo ufw allow 4000/tcp"   # Additional JMeter communication port
    docker-machine ssh "$1" "sudo ufw --force enable"   # Enable UFW without prompt
}

# Create the worker node using Docker Machine
function create_worker_node() {
    node_name=$1

    # Check if the machine already exists
    if check_machine_exists "$node_name"; then
        echo "Docker machine '$node_name' already exists. Skipping creation."
        return 0
    fi

    echo "Creating Docker machine '$node_name'..."
    docker-machine create \
        --driver digitalocean \
        --digitalocean-access-token "$DIGITALOCEAN_ACCESS_TOKEN" \
        --digitalocean-region "$DIGITALOCEAN_REGION" \
        --digitalocean-size "$DIGITALOCEAN_SIZE" \
        --digitalocean-image "ubuntu-20-04-x64" \
        --digitalocean-ssh-user root \
        --digitalocean-ssh-port 22 \
        --digitalocean-private-networking \
        --engine-opt="engine-opts='--timeout=300'" \
        --engine-env="DOCKER_OPTS=--dns-timeout=300" \
        --engine-label type=worker \
        "$node_name"

    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to create Docker machine '$node_name'."
        exit 1
    fi

    # Non-interactive update and install firewall
    echo "Updating and installing firewall on $node_name..."
    docker-machine ssh "$node_name" "sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ufw"

    # Configure firewall settings
    configure_firewall "$node_name"
}

# Function to add the worker to the Docker Swarm
function join_swarm() {
    node_name=$1
    manager_ip=$2
    token=$3

    echo "Ensuring $node_name joins the Docker Swarm..."
    docker-machine ssh "$node_name" "docker swarm join --token $token $manager_ip:2377"

    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to join the swarm with node '$node_name'."
        exit 1
    fi
}

# Function to deploy the JMeter worker container
function deploy_jmeter_worker() {
    node_name=$1

    # Get the public IP address of the worker node
    ip=$(docker-machine ip "$node_name")

    echo "Running JMeter in Server Mode on $node_name with IP: $ip..."
    docker-machine ssh "$node_name" "docker run \
        --detach \
        --name jmeter-worker \
        --publish 1099:1099 \
        --publish 4000:4000 \
        --network jmeter-network \
        justb4/jmeter:latest -s \
        -Dserver.rmi.localport=1099 \
        -Dserver.rmi.ssl.disable=true \
        -Djava.rmi.server.hostname=$ip \
        -Jserver.rmi.ssl.disable=true \
        -Jserver_port=4000"

    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to run JMeter server on $node_name."
        exit 1
    fi

    echo "JMeter server is running on $node_name."
}

# Main loop to create multiple worker nodes
worker_count=${1-1}
manager_ip=$(docker-machine ip jmeter-controller)

for ((i=1; i<=worker_count; i++)); do
    node_name="jmeter-worker-$i"

    # Create the worker node
    create_worker_node "$node_name"

    # Join the worker to the swarm
    join_swarm "$node_name" "$manager_ip" "$TOKEN"

    # Deploy JMeter on the worker node
    deploy_jmeter_worker "$node_name"
done

echo "JMeter worker nodes created and connected to the swarm successfully."
