#!/bin/bash

# Get the absolute path of the script's directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_ENV_FILE="$SCRIPT_DIR/app_do.env"

# URL for the JMeter test plan file
JMETER_TESTPLAN_URL="https://raw.githubusercontent.com/EngineeringMoonBear/docker-jmeter/main/testplan.jmx"

# Function to check if a Docker machine already exists
function check_machine_exists() {
    docker-machine ls | grep -w "$1" > /dev/null 2>&1
}

# Function to forcefully regenerate TLS certificates
function regenerate_tls_certificates() {
    echo "Regenerating TLS certificates for jmeter-controller..."
    docker-machine regenerate-certs -f jmeter-controller
    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to regenerate TLS certificates for jmeter-controller."
        exit 1
    fi
}

# Ensure the DigitalOcean firewall allows required ports for Docker and JMeter communication
function configure_firewall() {
    echo "Configuring firewall rules on jmeter-controller..."
    docker-machine ssh jmeter-controller "sudo ufw allow 22/tcp"
    docker-machine ssh jmeter-controller "sudo ufw allow 2376/tcp"
    docker-machine ssh jmeter-controller "sudo ufw allow 7946/tcp"
    docker-machine ssh jmeter-controller "sudo ufw allow 7946/udp"
    docker-machine ssh jmeter-controller "sudo ufw allow 4789/udp"
    docker-machine ssh jmeter-controller "sudo ufw --force enable"
}

# Function to remove old containers and images
function cleanup_docker_resources() {
    echo "Cleaning up existing Docker containers and images on jmeter-controller..."
    docker-machine ssh jmeter-controller "docker rm -f jmeter-controller || true"
    docker-machine ssh jmeter-controller "docker image prune -f"
    echo "Docker cleanup completed."
}

# Provision the JMeter Controller node using Docker Machine
echo "Provisioning machine for JMeter Controller node..."

# Check if the machine already exists
if check_machine_exists "jmeter-controller"; then
    echo "Docker machine 'jmeter-controller' already exists. Skipping creation."
else
    docker-machine create \
        --driver digitalocean \
        --digitalocean-access-token "$DIGITALOCEAN_ACCESS_TOKEN" \
        --digitalocean-region "$DIGITALOCEAN_REGION" \
        --digitalocean-size "$DIGITALOCEAN_SIZE" \
        --digitalocean-image "ubuntu-20-04-x64" \
        --engine-label type=controller \
        jmeter-controller

    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to create the JMeter Controller machine."
        exit 1
    fi
fi

# Regenerate TLS certificates
regenerate_tls_certificates

# Non-Interactive System Update to ensure UFW is installed
docker-machine ssh jmeter-controller "sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ufw"

# Configure firewall settings
configure_firewall

# Initialize Docker Swarm on the controller node (fix issue with swarm not initialized)
SWARM_STATUS=$(docker-machine ssh jmeter-controller "docker info --format '{{.Swarm.LocalNodeState}}'")

if [[ "$SWARM_STATUS" != "active" ]]; then
    echo "Initializing Docker Swarm on JMeter Controller node..."
    docker-machine ssh jmeter-controller "docker swarm init"
    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to initialize Docker Swarm on the JMeter Controller node."
        exit 1
    fi
else
    echo "Swarm is already active on the JMeter Controller node."
fi

# Create an overlay network for JMeter (fix issue with missing network)
docker-machine ssh jmeter-controller "docker network create --driver overlay jmeter-network"
if [ $? -ne 0 ]; then
    echo "[ERROR] Failed to create Docker overlay network 'jmeter-network'."
    exit 1
fi

# Cleanup old Docker resources
cleanup_docker_resources

# Verify firewall status
docker-machine ssh jmeter-controller "sudo ufw status verbose"

# Create a directory for test plans and download the .jmx file
docker-machine ssh jmeter-controller "sudo mkdir -p /load_tests && sudo chmod 777 /load_tests"
docker-machine ssh jmeter-controller "curl -L $JMETER_TESTPLAN_URL -o /load_tests/testplan.jmx"

# Pull the JMeter image
docker-machine ssh jmeter-controller "docker pull justb4/jmeter:latest"

# Get the join token for worker nodes and save it to the environment file
WORKER_JOIN_TOKEN=$(docker-machine ssh jmeter-controller "docker swarm join-token -q worker")
if [[ -f "$APP_ENV_FILE" ]]; then
    sed -i '' "s/export TOKEN=.*/export TOKEN=$WORKER_JOIN_TOKEN/" "$APP_ENV_FILE"
else
    echo "[ERROR] app_do.env file not found at $APP_ENV_FILE."
    exit 1
fi

# Run the JMeter controller without SSL for RMI
docker-machine ssh jmeter-controller "docker run -d --name jmeter-controller --network jmeter-network --volume /load_tests:/load_tests justb4/jmeter:latest -n -t /load_tests/testplan.jmx -l /load_tests/testplan-results.jtl -j /load_tests/testplan-log.log -Dserver.rmi.ssl.disable=true"

echo "JMeter Controller node provisioned and Swarm initialized successfully."
